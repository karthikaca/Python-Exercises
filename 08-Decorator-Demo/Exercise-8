from functools import wraps
import time
# defining a decorator
def time_this(func):
    @wraps(func)
    # timeit_wrapper is a Wrapper function 
    # added arguments inside the timeit_wrapper,if function takes any arguments it can be added like this
    def timeit_wrapper(*args, **kwargs):
        # storing time before function execution
        start_time = time.perf_counter()
        # calling the actual function now inside the wrapper function.
        result = func(*args, **kwargs)
        # storing time after function execution
        end_time = time.perf_counter()
        total_time = end_time - start_time
        print(f'Function {func.__name__}{args} {kwargs} Took {total_time:.4f} seconds')
        return result
    return timeit_wrapper
# time_this decartor can be added to any function present,
# in this case to calculate a factorial
@time_this
def factorial(n):
  return 1 if (n==1 or n==0) else n * factorial(n - 1);
# calling the function
factorial(10)
